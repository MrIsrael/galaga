CONSTANTES DEL JUEGO:
playerInfo[19] = { id, playerHere (true, false) }
enemyInfo[190] = { id, position, type ('joker'..., 'bullet', 'none'), remainingShots, scoreIfDestroyed }
Enemy grid element types:
  SOLDIERS: scarecrow, bane, joker
  BOSSES: theThing, terminator, alienQueen, predator
  AMMO: bullet, bomb
  OTHERS: explosion, none

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Atributos de gameInfo para cambio de nivel (automáticos): enemiesLeft
Atributos de gameInfo para cambio de nivel (modificables): pausedGame, levelJustStarted, playerWasHit, buttonText, mainFrameText, lives, level
Atributos de gameInfo para control de cambios y movimiento (modificables): msInterval, bombProbability, difficulty
Atributos de gameInfo para control de cambios y movimiento (automáticos): timeElapsed, initialCountdown, soundsOn
Atributos de gameInfo solo para mostrar en StatusBar (automáticos): pressedKeyCode, firedBullets, enemiesKilled, score, highScore, isSpanish, avatar

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

PENDIENTES FASE 3:
- Modificar favicon y archivo Readme.md (quitar referencias a create-react-app)
- Probar el juego completo varias veces, a ver si se deben poner más vidas, o si la variación de velocidad progresiva del 
  juego y de la cantidad de bombas debería ser más lenta.
- Ajustar el padding y fontsize de la StatusBar, para hacer más pequeño el tablero de juego y que se vea completo en una 
  pantalla de portátil. Ocultar también las posiciones de las casillas, y los letreros de "No Enemy".
- Poner las imágenes y los gifs todos transparentes. No deben quedar fondos blancos.
- Elegir el background color que tendrá el juego (gris oscuro, no negro).
- Mirar cómo agregar fuentes al build, y que se preinstalen o muestren en un equipo que no las temga por defecto.
- Incluir un tutorial con las instrucciones de juego: Un link que abra un modal, o un popup con el texto. Poner 
  screenshots de una partida real junto con el texto explicativo.

PENDIENTES FASE 4:
- Al final subir el build a Firebase, Netlify o Synology NAS, a ver si corren desde allí.
- Intentar correr la aplicación y crear un build exitoso configurando Webpack desde cero, sin usar 'npm create-react-app'.
- Empaquetar el build con Electron, a ver si el juego corre como aplicación de escritorio.


YA HECHAS:
- Buscar imagenes para identificar a:
  --> "8 bit galaga martian": Enemigos
  --> "8 bit cannon": Jugador
  --> "bullet": Bala disparada
  --> "explosion": Enemigo destruído
  --> "skull": Jugador eliminado (se restaría una vida)
  --> "logo": Logo de Galaga retro (NES)
- Definir el número de columnas (19) que tendrá el board grid. El player platform tendrá el mismo número 
  de columnas.
- Crear una separación visual entre casillas, para poder diferenciarlas durante el desarrollo. En la versión final
  se debe retirar, al igual que los bordes punteados.
- Se debe mover el jugador con las flechas, y disparar con barra espaciadora.
- Hay que incluir 3 contadores: "Level", "Enemies killed" y "Lives".
- Si pausedGame = true, todo se debería detener, debería aparecer un letrero que diga "paused" y debería sólo poder
  reiniciarse si se presiona Enter.
  La única manera de que el juego inicie es que input.onFocus se dispare, dando clic dentro de él, y poder capturar
  los códigos de las teclas del teclado presionadas.
  El juego se puede pausar si input.onBlur se dispara, si se presiona Tab o Enter. Enter también sale del modo pausa.
  Debería aparecer el aviso correcto para reiniciar el juego, dependiendo de qué lo pausó:
  --> Si fue input.onBlur: "Clic en el botón púrpura para volver al juego"
  --> Si fue Tab: "Clic en el botón púrpura para volver al juego"
  --> Si fue Enter: "Presione Enter para volver al juego"
- Hacer css animations para el movimiento de los enemigos dentro de su casilla.
- Hacer css animations para el movimiento de la bala subiendo en cada casilla, por niveles (x3), a medida que se desplaza. 
  La bala no sería del alto de la casilla (se incluyó una imagen gif, en vez de hacer un css animation).
- El estado global también debe contener un array (matríz?) por cada fila de enemigos, con valores que indiquen si en
  cada casilla hay o no un enemigo, qué tipo de enemigo es, cuántos impactos ha recibido y cuántos faltan por darle
  antes de poder destruirlo, etc. Se supone que deben haber enemigos más difíciles; no todos se deben poder destruir
  sólo con un tiro.
- Modificar la función updateEnemyFormation() para que se le pasen como parámetros el id inicial y final a cambiar,
  y el nuevo tipo de enemigo a poner. Los atributos remainingShots y scoreIfDestroyed podrían asignarse con una
  función aparte, que evalúe el tipo de enemigo y le asigne esos valores automáticamente.
- Incluir context API para poner un global state que guarde el estado del juego: En qué posición está el jugador,
  dónde van las balas y las bombas, cuántos enemigos hay por fila, si la bala o bomba impactó qué figura o animación
  mostrar, los valores de nivel, score y demás, la formación con la que los enemigos comienzan el nuevo nivel, etc.
- Arreglar el conteo de gameInfo.firedBullets, para que coincida con las balas realmente disparadas, y no con las veces
  que se ha presionado la barra espaciadora. Se incrementa la cuenta con setBullet(). La función fire() desaparece.
- Indicarle a GridMovement que debe mover los enemigos hacia los lados o hacia abajo, dependiendo del residuo del valor
  que se le pase en el parámetro secondsElapsed.
- Definir setInterval() para tiempos de movimiento de enemigos, cuánto tiempo se muestra la explosión, qué tan rápido
  cae la bomba, qué tan rápido sube la bala, etc.
- Crear arrays y lógica de movimiento, que ubique y mueva los enemigos, la bala y el jugador. Los enemigos deben poder 
  moverse hacia abajo y hacia los lados, en su misma fila; los jefes deberían poder esquivar las balas de vez en cuando,
  o moverse aleatoriamente.
- También incorporar la cuenta de gameInfo.killed.
- Incluir "score", "High score" (para cada sesión de juego) y definir qué puntación da destruir a cada tipo de enemigo,
  pasar de nivel, etc.
- Incluir lógica de movimiento de bombas. Se supone que solo las deberían poder disparar enemigos que no tuvieran otros
  enemigos debajo; además, podría disparar la bomba cualquier enemigo que cumpla la condición anterior, aleatoriamente.
- Hay necesidad de mantener gameInfo.enemyGridAction? No, pero hay que resolver el problema de tiempos de setInterval 
  dentro de useEffect.
- Cuando el jugador continúa, después de haber gastado una vida, debería ser inmune a los enemigos durante unos
  segundos, y la nave debería parpadear durante ese tiempo de "invisibilidad" (implementado ya con initialCountdown).
- Las vidas podrían mostrarse como pequeños logos de naves. Cada vez que el jugador sea destruido (pierda una vida),
  se restaría una de las navecitas (se mostrarán las vidas mejor como números, para no tener que poner más <div> y
  más reglas CSS).
- Se podrían luego incluir obstáculos que haya que destruir primero con balas, y que se vayan desintegrando por
  niveles, para después de destruirlos poder impactar los enemigos que hay detrás. Los enemigos deberían poder saber
  si mientras avanzan encuentran un obstáculo, y rodearlo, antes de seguir avanzando hacia abajo (opción por incluir
  en la v2.0).
- Incluir pantalla de bienvenida (WelcomeScreen), incluyendo un tutorial con las instrucciones del juego, selección
  de idioma, selección de avatar, y botón para empezar a jugar.
- Incluir funcionalidad de seleccionar lenguaje: Español o inglés. Poner una banderita o algo. Se podría cambiar durante
  el juego, o sólo al inicio?
- Se podría incluir un botón que permita cambiar el avatar del jugador: Cañón, ovni, Milennium Falcon, etc.
- Si el jugador es eliminado, mostrar mensaje de "Game Over!". Debería haber un botón que permita reiniciar el 
  juego.
- Si el jugador termina un nivel (elimina a todos los enemigos), debe aparecer un mensaje (en la status bar? 
  en el centro de la game grid, encima de todo?) que avise del cambio de nivel. Se incrementa también el contador
  de nivel. Debería haber un puntaje extra por esto.
- El siguiente nivel debe empezar con una formación enemiga diferente, incluyendo uno o varios bosses nuevos.
- Cada dos o 3 niveles, debe aumentar la velocidad del juego: Los marcianos deben moverse más rápido, vertical
  y horizontalmente. Se haría esto cambiando el valor en milisegundos del SetInterval(), en EnemyGrid.
  Tambien la cantidad de bombas, con bombProbability.
- Incluir selector de dificultad (rookie, trooper, berserker).
- Agrandar botón de reinicio del juego (morado); intentar habilitar iniciar nivel solo con Enter (también con click).
  Incluir parpadeo de advertencia en el botón, para que el jugador sepa qué hacer si el juego está pausado.
- Definir las formaciones enemigas para los niveles que faltan (hasta el 12, y luego repetir casos).
- Poner un sexto botón en WelcomeScreen, que sea un "About / créditos".
- Se puede agregar música de juego de 8 bits? Buscar midi y cómo reproducirlo. También habría un checkbox para
  silenciar la música (nuevo botón en WelcomeScreen).
- Buscar sonidos y efectos para:
  --> Menú principal y configuración, juego en pausa (jazz)
  --> Click en un botón
  --> Comienzo de nivel (lightsabre sound)
  --> Durante la batalla (techno) --> 13 posibles tracks, reproducidos aleatoriamente
  --> Movimiento vertical de los aliens
  --> Disparo de una bala
  --> Disparo de una bomba
  --> Explosión de un enemigo o bomba
  --> Explosión de un boss
  --> Destrucción de la nave del jugador / pérdida de una vida
  --> Fin de nivel / pantalla de next level (ceremonia de condecoración)
  --> Pantalla de game over, antes de volver al welcomescreen (estilo menú de MetalGear)


PREGUNTAS:
- Cómo se enlazan propiedades css a una imagen insertada en un componente en React? Que tome las propiedades definidas
  en un archivo css aparte, sólo con incluirle el atributo className? Sólo lo he podido hacer con inline styling o
  creando un objeto con las propiedades css, al final del código del componente donde va la imagen.
- Cómo lograr que una imagen se muestre con fondo transparente? Debe ser .png?
- Cómo fijar el ancho de una grid-template-area en css? Si algo dentro de ella cambia de ancho (como la longitud de un
  texto), el área cambia también su ancho proporcionalmente (el container si conserva el ancho fijo total).
- Dónde poner un addEventListener() que permita ejecutar una función dependiendo de una tecla del teclado presionada, en
  cualquier momento? En index.js? Solo he podido hacerlo leyendo el evento KeyDown.event.keyCode, cuando un input tiene
  activada su propiedad onFocus, y el teclado puede leerse (solo en ese caso, una tecla presionada genera un evento).
- Cuál es la mejor manera de ordenar los archivos de la aplicación? Cómo se configura adecuadamente un Context Provider
  en conjunto con un índice de Reducers, para poder tener Context, Actions y Reducers en achivos separados? Cuál es el
  patrón de diseño ideal en ese caso?